들어오는 데이터를 '검증'하는 방법을 알아보고, 상품 수정 API를 만들어보자

백엔드의 핵심이라고 할 수 있는 '안전한' 코드를 만들기 위한 방법을 배워보자


class-transformer@0.5.1
class-validator@0.14.0

이 두개의 라이브러리를 설치하고
dto에서 적용해준다 ex. price는 Min 값이 0이라는 검증조건을 달아준다
main.ts에는 app.useGlobalPipes(new ValidationPipe());를 넣어준다.
이걸 넣어주면 request를 날릴때 pipe를 거쳐서 그 파이프를 통과한것만 resolver로 요청이 날라간다 ex. price값이 0 이상인 것만 요청을 날린다

nestjs 독스로 가서 FAQ -> Request lifecycle가면 어떤 순서로 요청이 처리되는지 볼수 있다
지금까지 배운거로는 대략적으로
요청 -> 파이프 -> 컨트롤러 -> 서비스 -> 응답
이 순서이다


검증 같은 로직을 사용할때는 몇개의 코드를 빼먹는 위험성을 방지하기 위해 하나를 만들어놓고 그걸 "재사용"한다

