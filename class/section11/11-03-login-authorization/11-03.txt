로그인으로 인증을 해서 해당 유저가 액세스 토큰을 받은 경우,

해당 유저가 인가가 필요한 요청을 했다고 가정해보자

users폴더에 있는 fetchUser API에 요청했다면 거기서 UseGuards를 만나게 되고 그 안에 있는 인가 방식에 따라 엑세스 토큰을 비교한다
이때 다양한 '전략' 패턴이 사용될 수 있다

가드를 만드는건 auth의 strategies폴더에서 하는거다!

@UseGuards(AuthGuard('access')) 에서 'access'부분에 구글, 네이버 등등의 인가 방법이 사용될 수 있고, 같은 클래스에 부품만 바꾸는게 '전략'패턴이므로 이것도 전략 패턴을 사용했다고 할 수 있따

그래서 auth폴더에 strategies폴더를 만들어서 전략패턴을 위한 클래스를 만들어준다