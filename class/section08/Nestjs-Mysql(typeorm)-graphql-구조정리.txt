
./src
├── apis
│   ├── boards
│   │   ├── boards.module.ts 
│   │   ├── boards.resolver.ts
│   │   ├── boards.service.ts
│   │   ├── dto
│   │   │   └── create-board.input.ts => 입력받는 input값에 대한 타입을 묶어서 정의하는 곳 (Mutation할때 필요)
│   │   ├── entities
│   │   │   └── board.entity.ts => 테이블 스키마 정의하는 곳(Query할때 필요)
│   │   └── interfaces
│   │       └── boards-service.interface.ts => Mutation할때 input으로 들어오는 값에 대한 '타입스크립트' 정의하는 곳 , dto활용해서 만들기
│   ├── products
│   └── users
├── app.module.ts
├── commons
│   └── graphql
│       └── schema.gql => 자동으로 생성되는 graphql docs 파일이라고 생각하면 됨
└── main.ts


dto: 입력받는 input값에 대한 타입을 묶어서 정의하는 곳, Mutation할때 필요함 => typescript, graphql 모두 정의해야됨
entities: 테이블 스키마 정의하는 곳, Query할때 필요 => typescript, graphql 모두 정의해야됨
interfaces: Mutation할때 input으로 들어오는 값에 대한 타입스크립트 정의하는 곳 => typescript만 정의하면 됨, 이때 타입스크립트는 dto를 그대로 활용해서 만들 수 있음

service를 여러개 만들어서 resolver에서 모아주고 그 service와 resolver를 module에서 모아준다
각 API별 module은 app.module에서 싹 모아주고 그걸 main.ts로 보내면 최종 실행이 된다